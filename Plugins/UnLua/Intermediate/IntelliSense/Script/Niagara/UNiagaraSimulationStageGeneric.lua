---@class UNiagaraSimulationStageGeneric : UNiagaraSimulationStageBase
---@field public EnabledBinding FNiagaraVariableAttributeBinding @Optional bool binding allowing scripts to control if the simulation stage is enabled or not.
---@field public IterationSource ENiagaraIterationSource @Select what we should be iterating over, particles or data interfaces. The source provides things such as element count (when not overriden) and stack context variables (i.e. attributes on grids)
---@field public NumIterations FNiagaraParameterBindingWithValue @Number of times (or iterations) the simulation stage will execute in a row. For example, setting this to 10 will mean this simulation stage runs 10 times in a row before the next stage. Can also be bound to a attribute so the simulation can dynamically decide
---@field public ExecuteBehavior ENiagaraSimStageExecuteBehavior @Controls when the simulation stage should execute, only valid for data interface iteration stages
---@field public bDisablePartialParticleUpdate boolean @Disables the ability to read / write from the same particle buffer, i.e. only update position and no other attributes. By default this should not be changed, but can be used to debug issues.
---@field public DataInterface FNiagaraVariableDataInterfaceBinding @Source data interface to use for the simulation stage. The data interface needs to be a subclass of UNiagaraDataInterfaceRWBase, for example the Grid2D and Grid3D data interfaces.
---@field public bParticleIterationStateEnabled boolean @When enabled we iterate over the subset of particles that satisfy the binding & range selected. For example, if the binding was set to Particles.MyStateIndex and the range was 1-3 only the particles with values of 1, 2 or 3 for Particles.MyStateIndex would run the script, all others would be ignored.
---@field public ParticleIterationStateBinding FNiagaraVariableAttributeBinding @Particle state attribute binding, when enabled we will only allow particles who pass the state range check to be processed.
---@field public ParticleIterationStateRange FIntPoint @The inclusive range used to check particle state binding against when enabled.
---@field public bGpuDispatchForceLinear boolean @When enabled we force the dispatch to be linear (i.e. one dimension is used). NOTE: Cannot be used with OverrideGpuDispatchType.
---@field public bOverrideGpuDispatchNumThreads boolean @When enabled we use a custom number of threads for the dispatch.
---@field public OverrideGpuDispatchNumThreadsX FNiagaraParameterBindingWithValue @Parameter binding / constant value for Num Threads X
---@field public OverrideGpuDispatchNumThreadsY FNiagaraParameterBindingWithValue @Parameter binding / constant value for Num Threads Y
---@field public OverrideGpuDispatchNumThreadsZ FNiagaraParameterBindingWithValue @Parameter binding / constant value for Num Threads Z
---@field public DirectDispatchType ENiagaraGpuDispatchType @Dimensions to use for dispatch.
---@field public DirectDispatchElementType ENiagaraDirectDispatchElementType @Customizes what the element count means for a direct dispatch.
---@field public ElementCountX FNiagaraParameterBindingWithValue @Integer binding to override the number of elements the stage will execute along X. For example, if you want to iterate over a custom source such as triangles on a mesh you can set an int to the triangle count in an emitter script and bind that as the element count.
---@field public ElementCountY FNiagaraParameterBindingWithValue @Integer binding to override the number of elements the stage will execute along Y. For example, if you want to iterate over a 2D texture you can set an int to the texture height in an emitter script and bind that as the element count.
---@field public ElementCountZ FNiagaraParameterBindingWithValue @Integer binding to override the number of elements the stage will execute along Z. For example, if you want to iterate over a 3D texture you can set an int to the texture depth in an emitter script and bind that as the element count.
local UNiagaraSimulationStageGeneric = {}

