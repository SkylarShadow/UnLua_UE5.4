---Base storage class for Niagara parameter values.
---@class FNiagaraParameterStore
---@field private Owner TWeakObjectPtr<UObject> @Owner of this store. Used to provide an outer to data interfaces in this store.
---@field private ParameterOffsets TMap<FNiagaraVariable, integer> @Map from parameter defs to their offset in the data table or the data interface. TODO: Separate out into a layout and instance class to reduce duplicated data for this?
---@field private SortedParameterOffsets TArray<FNiagaraVariableWithOffset> @Storage for the set of variables that are represented by this ParameterStore.  Shouldn't be accessed directly, instead use       ReadParameterVariables()
---@field private ParameterData TArray<integer> @Buffer containing parameter data. Indexed using offsets in ParameterOffsets
---@field private DataInterfaces TArray<UNiagaraDataInterface> @Data interfaces for this script. Possibly overridden with externally owned interfaces. Also indexed by ParameterOffsets.
---@field private UObjects TArray<UObject> @UObjects referenced by this store. Also indexed by ParameterOffsets.
---@field private OriginalPositionData TArray<FNiagaraPositionSource> @Holds position type source data to be later converted to LWC format. We use an array here instead of a map to save some memory and because linear search is faster with the few elements in here.
---@field public DebugName string
---@field public ParameterGuidMapping TMap<FNiagaraVariable, FGuid> @Guid data to remap rapid iteration parameters after a function input was renamed.
local FNiagaraParameterStore = {}
