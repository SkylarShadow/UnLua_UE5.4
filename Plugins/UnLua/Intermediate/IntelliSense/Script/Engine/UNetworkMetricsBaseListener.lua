---An abstract class for metrics listeners that are registered with FNetworkMetricsDatabase.
---Listeners are the recommended method for reading the current value of metrics from FNetworkMetricsDatabase.
---Begin by creating a sub-class of UNetworkMetricsBaseListener that overrides the Report() function. This function will be called
---by FNetworkMetricsDatabase::ProcessListeners() once a frame and will be provided an array of metrics that are registered
---with FNetworkMetricsDatabase::Register():
---UCLASS()
---class UNetworkMetricsMyListener : public UNetworkMetricsBaseListener
---{
---            GENERATED_BODY()
---public:
---            virtual ~UNetworkMetricsMyListener() = default;
---            void Report(const TArray<UE::Net::FNetworkMetricSnapshot>& Stats)
---            {
---                    for (const UE::Net::FNetworkMetric<int64>& Metric : Snapshot.MetricInts)
---                    {
---                            // Do something with integer metrics...
---                    }
---                    for (const UE::Net::FNetworkMetric<float>& Metric : Snapshot.MetricFloats)
---                    {
---                            // Do something with floating point metrics...
---                    }
---            }
---};
---Listeners can either be registered explicitly using FNetworkMetricsDatabase::Register() or through the engine configuration files. A configuration
---file is the prefered way to register a listener because it allows metrics reporting to be configured without rebuilding the application.
---This is an example configuration from an ini file (e.g. DefaultEngine.ini) that registers metrics with the example listener above:
---[/Script/Engine.NetworkMetricsConfig]
---+Listeners=(MetricName=ExampleMetric1, ClassName=/Script/Engine.NetworkMetricsMyListener)
---All sub-classes of UNetworkMetricsBaseListener can set a time interval between calls to Report(). This is a useful method for limiting the rate
---at which metrics need to be recorded (e.g. you may only want to report metrics to an external analytics services every 60 seconds). This time interval
---can be set by calling UNetworkMetricsBaseListener::SetInterval() or in a configuration file by setting the IntervalSeconds property on the
---listener sub-class.
---This is an example configuration from an ini file (e.g. DefaultEngine.ini) that sets the interval between calling UNetworkMetricsMyListener::Report()
---to 1 second:
---[/Script/Engine.NetworkMetricsMyListener]
---IntervalSeconds=1
---@class UNetworkMetricsBaseListener : UObject
---@field private IntervalSeconds number
local UNetworkMetricsBaseListener = {}

