---Solver iterations settings for use by RigidBody AnimNode (RBAN) in the Anim Graph. Each RBAN node runs its own solver with these settings.
---@class FPhysicsAssetSolverSettings
---@field public PositionIterations integer @RBAN: The number of position iterations to run. The position solve is responsible for depenetration. Increasing this will improve simulation stability, but increase the cost.
---@field public VelocityIterations integer @RBAN: The number of velocity iterations to run. The velocity solve is responsible for restitution (bounce) and friction. This should usually be 1, but could be 0 if you don't care about friction and restitution.
---@field public ProjectionIterations integer @RBAN: The number of projection iterations to run. The projection phase is a final pass over the constraints, applying a semi-physical correction to any joint errors remaining after the position and velocity solves. It can be very helpful to stabilize joint chains, but can cause issues with collision response. The projection magnitude can be controlled per-constraint in the constraint settings (assuming ProjectionIteration is not zero). This should be left as 1 in almost all cases.
---@field public CullDistance number @RBAN: The distance at which collisions are ignored. In general you need this to be a bit larger than the typical relative body movement in your simulation, but small enough so that we don't have to speculatively create too many unused collisions.
---@field public MaxDepenetrationVelocity number @RBAN: When bodies are penetrating, this is the maximum velocity delta that can be applied in one frame.
---@field public FixedTimeStep number @RBAN: The recommended fixed timestep for the RBAN solver. Set to 0 to run with variable timestep (default). NOTE: If this value is non-zero and less than the current frame time, the simulation will step multiple times which increases the cost.
---@field public bUseLinearJointSolver boolean @RBAN: Whether to use the linear or non-linear solver for RBAN Joints. The linear solver is significantly cheaper than the non-linear solver when you are running multiple iterations, but is more likely to suffer from jitter. In general you should try to use the linear solver and increase the PositionIterations to improve stability if possible, only using the non-linear solver as a last resort.
local FPhysicsAssetSolverSettings = {}
