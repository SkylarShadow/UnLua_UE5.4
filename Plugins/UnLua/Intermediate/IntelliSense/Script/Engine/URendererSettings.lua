---Rendering settings.
---@class URendererSettings : UDeveloperSettings
---@field public MobileShadingPath integer @The shading path to use on mobile platforms. Changing this setting requires restarting the editor. Mobile HDR is required for Deferred Shading.
---@field public bMobileSupportDeferredOnOpenGL boolean @Whether to allow Deferred Shading on OpenGL, requires the DXC shader compiler and Mobile Shading set to deferred
---@field public bMobileSupportGPUScene boolean @Whether to enable GPUScene on mobile. GPUScene is required for mesh auto-instancing. Changing this setting requires restarting the editor.
---@field public MobileAntiAliasing integer @The mobile default anti-aliasing method.
---@field public MobileFloatPrecisionMode integer @Project wide mobile float precision mode for shaders and materials. Changing this setting requires restarting the editor.
---@field public bMobileAllowDitheredLODTransition boolean @Whether to support 'Dithered LOD Transition' material option on mobile platforms. Enabling this may degrade performance as rendering will not benefit from Early-Z optimization.
---@field public bMobileVirtualTextures boolean @Whether to support virtual textures on mobile. Requires general virtual texturing option enabled as well. Changing this setting requires restarting the editor.
---@field public bDiscardUnusedQualityLevels boolean @When running in game mode, whether to keep shaders for all quality levels in memory or only those needed for the current quality level. Unchecked: Keep all quality levels in memory allowing a runtime quality level change. (default) Checked: Discard unused quality levels when loading content for the game, saving some memory.
---@field public bOcclusionCulling boolean @Allows occluded meshes to be culled and not rendered.
---@field public MinScreenRadiusForLights number @Screen radius at which lights are culled. Larger values can improve performance but causes lights to pop off when they affect a small area of the screen.
---@field public MinScreenRadiusForEarlyZPass number @Screen radius at which objects are culled for the early Z pass. Larger values can improve performance but very large values can degrade performance if large occluders are not rendered.
---@field public MinScreenRadiusForCSMdepth number @Screen radius at which objects are culled for cascaded shadow map depth passes. Larger values can improve performance but can cause artifacts as objects stop casting shadows.
---@field public bPrecomputedVisibilityWarning boolean @Displays a warning when no precomputed visibility data is available for the current camera location. This can be helpful if you are making a game that relies on precomputed visibility, e.g. a first person mobile game.
---@field public bTextureStreaming boolean @When enabled textures will stream in based on what is visible on screen.
---@field public bUseDXT5NormalMaps boolean @Whether to use DXT5 for normal maps, otherwise BC5 will be used, which is not supported on all hardware. Changing this setting requires restarting the editor.
---@field public bVirtualTextures boolean @When enabled, Textures can be streamed using the virtual texture system. Changing this setting requires restarting the editor.
---@field public bVirtualTextureEnableAutoImport boolean @Set the 'Virtual Texture Streaming' setting for imported textures based on 'Auto Virtual Texturing Size' in the texture import settings.
---@field public bVirtualTexturedLightmaps boolean @When enabled, lightmaps will be streamed using the virtual texture system. Changing this setting requires restarting the editor.
---@field public bVirtualTextureAnisotropicFiltering boolean @When enabled, virtual textures will use anisotropic filtering. This adds a cost to all shaders using virtual textures. Changing this setting requires restarting the editor.
---@field public bEnableVirtualTextureOpacityMask boolean @Relax restriction on virtual textures contributing to Opacity Mask. In some edge cases this can lead to low resolution shadow edges.
---@field public VirtualTextureTileSize integer @Size in pixels for virtual texture tiles, will be rounded to next power-of-2. Changing this setting requires restarting the editor.
---@field public VirtualTextureTileBorderSize integer @Size in pixels for virtual texture tile borders, will be rounded to next power-of-2. Larger borders allow higher degree of anisotropic filtering, but uses more disk/cache memory. Changing this setting requires restarting the editor.
---@field public VirtualTextureFeedbackFactor integer @Lower factor will increase virtual texture feedback resolution which increases CPU/GPU overhead, but may decrease streaming latency, especially if materials use many virtual textures.
---@field public WorkingColorSpaceChoice integer @Choose from list of provided working color spaces, or custom to provide user-defined space.
---@field public RedChromaticityCoordinate FVector2D @Working color space red chromaticity coordinates.
---@field public GreenChromaticityCoordinate FVector2D @Working color space green chromaticity coordinates.
---@field public BlueChromaticityCoordinate FVector2D @Working color space blue chromaticity coordinates.
---@field public WhiteChromaticityCoordinate FVector2D @Working color space white chromaticity coordinates.
---@field public bClearCoatEnableSecondNormal boolean @Use a separate normal map for the bottom layer of a clear coat material. This is a higher quality feature that is expensive.
---@field public DynamicGlobalIllumination integer @Dynamic Global Illumination Method
---@field public Reflections integer @Reflection Method
---@field public ReflectionCaptureResolution integer @The cubemap resolution for all reflection capture probes. Must be power of 2. Note that for very high values the memory and performance impact may be severe.
---@field public ReflectionEnvironmentLightmapMixBasedOnRoughness boolean @Whether to reduce lightmap mixing with reflection captures for very smooth surfaces.  This is useful to make sure reflection captures match SSR / planar reflections in brightness.
---@field public bUseHardwareRayTracingForLumen boolean @Uses Hardware Ray Tracing for Lumen features, when supported by the video card + RHI + Operating System. Lumen will fall back to Software Ray Tracing otherwise. Note: Hardware ray tracing has significant scene update costs for scenes with more than 100k instances.
---@field public LumenRayLightingMode ELumenRayLightingMode @Controls how Lumen Reflection rays are lit when Lumen is using Hardware Ray Tracing.  By default, Lumen uses the Surface Cache for best performance, but can be set to 'Hit Lighting' for higher quality.
---@field public LumenFrontLayerTranslucencyReflections boolean @Whether to use high quality mirror reflections on the front layer of translucent surfaces.  Other layers will use the lower quality Radiance Cache method that can only produce glossy reflections.  Increases GPU cost when enabled.
---@field public LumenSoftwareTracingMode integer @Controls which tracing method Lumen uses when using Software Ray Tracing.
---@field public LumenRayTracedTranslucentRefractions boolean @Whether to use Lumen refraction tracing from surfaces when using harware ray tracing and hit lighting. This will require shader recompilation to compile of translucent card capture Lumen shaders. Increases GPU cost when enabled.
---@field public ShadowMapMethod integer @Select the primary shadow mapping method. Automatically uses 'Shadow Maps' when Forward Shading is enabled for the project as Virtual Shadow Maps are not supported.
---@field public bEnableRayTracing boolean @Support Hardware Ray Tracing features.  Requires 'Support Compute Skincache' before project is allowed to set this.
---@field public bEnableRayTracingShadows boolean @Controls whether Ray Traced Shadows are used by default. Lights can still override and force Ray Traced shadows on or off. Requires Hardware Ray Tracing to be enabled.
---@field public bEnableRayTracingTextureLOD boolean @Enable automatic texture mip level selection in ray tracing material shaders. Unchecked: highest resolution mip level is used for all texture (default). Checked: texture LOD is approximated based on total ray length, output resolution and texel density at hit point (ray cone method).
---@field public bEnablePathTracing boolean @Enables the Path Tracing renderer. This enables additional material permutations. Requires Hardware Ray Tracing to be enabled.
---@field public bGenerateMeshDistanceFields boolean @Whether to build distance fields of static meshes, needed for Software Ray Tracing in Lumen, and distance field AO, which is used to implement Movable SkyLight shadows, and ray traced distance field shadows on directional lights.  Enabling will increase the build times, memory usage and disk size of static meshes.  Changing this setting requires restarting the editor.
---@field public DistanceFieldVoxelDensity number @Determines how the default scale of a mesh converts into distance field voxel dimensions. Changing this will cause all distance fields to be rebuilt.  Large values can consume memory very quickly!  Changing this setting requires restarting the editor.
---@field public bNanite boolean @Whether to enable Nanite rendering.
---@field public bAllowStaticLighting boolean @Whether to allow any static lighting to be generated and used, like lightmaps and shadowmaps. Games that only use dynamic lighting should set this to 0 to save some static lighting overhead. Disabling allows Material AO and Material BentNormal to work with Lumen Global Illumination.  Changing this setting requires restarting the editor.
---@field public bUseNormalMapsForStaticLighting boolean @Whether to allow any static lighting to use normal maps for lighting computations.
---@field public bForwardShading boolean @Whether to use forward shading on desktop platforms, requires Shader Model 5 hardware.  Forward shading supports MSAA and has lower default cost, but fewer features supported overall.  Materials have to opt-in to more expensive features like high quality reflections.  Changing this setting requires restarting the editor.
---@field public bVertexFoggingForOpaque boolean @Causes opaque materials to use per-vertex fogging, which costs slightly less.  Only supported with forward shading. Changing this setting requires restarting the editor.
---@field public bSeparateTranslucency boolean @Allow translucency to be rendered to a separate render targeted and composited after depth of field. Prevents translucency from appearing out of focus.
---@field public TranslucentSortPolicy integer @The sort mode for translucent primitives, affecting how they are ordered and how they change order as the camera moves. Requires that Separate Translucency (under Postprocessing) is true.
---@field public TranslucentSortAxis FVector @The axis that sorting will occur along when Translucent Sort Policy is set to SortAlongAxis.
---@field public bLocalFogVolumeApplyOnTranslucent boolean @Allow translucency to be rendered to a separate render targeted and composited after depth of field. Prevents translucency from appearing out of focus.
---@field public FoveationLevel integer @Set the level of foveation to apply when generating the Variable Rate Shading attachment. This feature is currently experimental. This can yield some fairly significant performance benefits on GPUs that support Tier 2 VRS. Lower settings will result in almost no discernible artifacting on most HMDs; higher settings will show some artifacts towards the edges of the view.
---@field public bDynamicFoveation boolean @Allows foveation level to adjust dynamically based on GPU utilization. Level will range between none at the minimum, and the currently selected foveation level at the maximum.
---@field public CustomDepthStencil integer @Whether the custom depth pass for tagging primitives for postprocessing passes is enabled. Enabling it on demand can save memory but may cause a hitch the first time the feature is used.
---@field public bCustomDepthTaaJitter boolean @Whether the custom depth pass has the TemporalAA jitter enabled. Disabling this can be useful when the result of the CustomDepth Pass is used after TAA (e.g. after Tonemapping)
---@field public bEnableAlphaChannelInPostProcessing integer @Configures alpha channel support in renderer's post processing chain. Still experimental: works only with Temporal AA, Motion Blur, Circle Depth Of Field. This option also force disable the separate translucency.
---@field public bDefaultFeatureBloom boolean @Whether the default for Bloom is enabled or not (postprocess volume/camera/game setting can still override and enable or disable it independently)
---@field public bDefaultFeatureAmbientOcclusion boolean @Whether the default for AmbientOcclusion is enabled or not (postprocess volume/camera/game setting can still override and enable or disable it independently)
---@field public bDefaultFeatureAmbientOcclusionStaticFraction boolean @Whether the default for AmbientOcclusionStaticFraction is enabled or not (only useful for baked lighting and if AO is on, allows to have SSAO affect baked lighting as well, costs performance, postprocess volume/camera/game setting can still override and enable or disable it independently)
---@field public bDefaultFeatureAutoExposure boolean @Whether the default for AutoExposure is enabled or not (postprocess volume/camera/game setting can still override and enable or disable it independently)
---@field public DefaultFeatureAutoExposure integer @The default method for AutoExposure(postprocess volume/camera/game setting can still override and enable or disable it independently)
---@field public DefaultFeatureAutoExposureBias number @Default Value for auto exposure bias.
---@field public bExtendDefaultLuminanceRangeInAutoExposureSettings boolean @Whether the default values for AutoExposure should support an extended range of scene luminance. Also changes the exposure settings to be expressed in EV100. Having this setting disabled is deprecated and can only be done manually using r.DefaultFeature.AutoExposure.ExtendDefaultLuminanceRange.
---@field public DefaultFeatureLocalExposureHighlightContrast number @Default Value for Local Exposure Highlight Contrast.
---@field public DefaultFeatureLocalExposureShadowContrast number @Default Value for Local Exposure Shadow Contrast.
---@field public bDefaultFeatureMotionBlur boolean @Whether the default for MotionBlur is enabled or not (postprocess volume/camera/game setting can still override and enable or disable it independently)
---@field public bDefaultFeatureLensFlare boolean @Whether the default for LensFlare is enabled or not (postprocess volume/camera/game setting can still override and enable or disable it independently)
---@field public bTemporalUpsampling boolean @Whether to do primary screen percentage upscale with Temporal AA pass or not.
---@field public DefaultFeatureAntiAliasing integer @Selects the anti-aliasing method to use.
---@field public MSAASampleCount integer @Default number of samples for MSAA.
---@field public DefaultLightUnits ELightUnits @Which units to use for newly placed point, spot and rect lights
---@field public DefaultBackBufferPixelFormat integer @Pixel format used for back buffer, when not specified
---@field public DefaultManualScreenPercentage number
---@field public DefaultScreenPercentageDesktopMode EScreenPercentageMode
---@field public DefaultScreenPercentageMobileMode EScreenPercentageMode
---@field public DefaultScreenPercentageVRMode EScreenPercentageMode
---@field public DefaultScreenPercentagePathTracerMode EScreenPercentageMode
---@field public bRenderUnbuiltPreviewShadowsInGame boolean @Whether to render unbuilt preview shadows in game.  When enabled and lighting is not built, expensive preview shadows will be rendered in game.  When disabled, lighting in game and editor won't match which can appear to be a bug.
---@field public bStencilForLODDither boolean @Whether to use stencil for LOD dither fading.  This saves GPU time in the base pass for materials with dither fading enabled, but forces a full prepass. Changing this setting requires restarting the editor.
---@field public EarlyZPass integer @Whether to use a depth only pass to initialize Z culling for the base pass.
---@field public bEarlyZPassOnlyMaterialMasking boolean @Whether to compute materials' mask opacity only in early Z pass. Changing this setting requires restarting the editor.
---@field public bEnableCSMCaching boolean @Enable caching CSM to reduce draw calls for casting CSM and probably improve performance.
---@field public bDBuffer boolean @Whether to accumulate decal properties to a buffer before the base pass.  DBuffer decals correctly affect lightmap and sky lighting, unlike regular deferred decals.  DBuffer enabled forces a full prepass.  Changing this setting requires restarting the editor.
---@field public ClearSceneMethod integer @Select how the g-buffer is cleared in game mode (only affects deferred shading).
---@field public VelocityPass integer @When to write velocity buffer. Changing this setting requires restarting the editor.
---@field public VertexDeformationOutputsVelocity integer @Enables materials with World Position Offset and/or World Displacement to output velocities during the velocity pass even when the actor has not moved.  If the VelocityPass is set to 'Write after base pass' this can incur a performance cost due to additional draw calls.  That performance cost is higher if many objects are using World Position Offset. A forest of trees for example.
---@field public bSelectiveBasePassOutputs boolean @Enables not exporting to the GBuffer rendertargets that are not relevant. Changing this setting requires restarting the editor.
---@field public bDefaultParticleCutouts boolean @When enabled, after changing the material on a Required particle module a Particle Cutout texture will be chosen automatically from the Opacity Mask texture if it exists, if not the Opacity Texture will be used if it exists.
---@field public GPUSimulationTextureSizeX integer @The X size of the GPU simulation texture size. SizeX*SizeY determines the maximum number of GPU simulated particles in an emitter. Potentially overridden by CVar settings in BaseDeviceProfile.ini.
---@field public GPUSimulationTextureSizeY integer @The Y size of the GPU simulation texture size. SizeX*SizeY determines the maximum number of GPU simulated particles in an emitter. Potentially overridden by CVar settings in BaseDeviceProfile.ini.
---@field public bGlobalClipPlane boolean @Whether to support the global clip plane needed for planar reflections.  Enabling this increases BasePass triangle cost by ~15% regardless of whether planar reflections are active. Changing this setting requires restarting the editor.
---@field public GBufferFormat integer @Selects which GBuffer format should be used. Affects performance primarily via how much GPU memory bandwidth used. This also controls Substrate normal quality and, in this case, a restart is required.
---@field public bUseGPUMorphTargets boolean @Whether to use original CPU method (loop per morph then by vertex) or use a GPU-based method on Shader Model 5 hardware.
---@field public MorphTargetMaxBlendWeight number @Blend target weights will be checked against this value for validation. Absolue values greather than this number will be clamped to [-MorphTargetMaxBlendWeight, MorphTargetMaxBlendWeight].
---@field public bSupportSkyAtmosphere boolean @The sky atmosphere component requires extra samplers/textures to be bound to apply aerial perspective on transparent surfaces (and all surfaces on mobile via per vertex evaluation).
---@field public bSupportSkyAtmosphereAffectsHeightFog boolean @The sky atmosphere component can light up the height fog but it requires extra samplers/textures to be bound to apply aerial perspective on transparent surfaces (and all surfaces on mobile via per vertex evaluation). It requires r.SupportSkyAtmosphere to be true.
---@field public bSupportLocalFogVolumes boolean @Local fog volume components can will need to be applied on translucent, and opaque in forward, so resources will need to be bound to apply aerial perspective on transparent surfaces (and all surfaces on mobile via per vertex evaluation). It requires r.SupportLocalFogVolumes to be true.
---@field public bSupportCloudShadowOnForwardLitTranslucent boolean @Enable cloud shadow on translucent surface not relying on the translucenct lighting volume, e.g. using Forward lighting. This is evaluated per vertex to reduce GPU cost and requires extra samplers/textures to be bound to vertex shaders. This is not implemented on mobile as VolumetricClouds are not available on these platforms.
---@field public LightFunctionAtlasPixelFormat integer @Select the format of the light function atlas texture.
---@field public bVolumetricFogUsesLightFunctionAtlas boolean @Enable support for light function on volumetric fog, when the light function atlas is enabled.
---@field public bDeferredLightingUsesLightFunctionAtlas boolean @Enable support for light function on deferred lighting (multi-pass and clustered), when the light function atlas is enabled.
---@field public bSingleLayerWaterUsesLightFunctionAtlas boolean @Enable support for light function on Single Layer Water when the light function atlas is enabled.
---@field public bTranslucentUsesLightFunctionAtlas boolean @Enable support for light function on Translucent material using Forward Shading mode, when the light function atlas is enabled.
---@field public bSupportIESProfileOnTranslucent boolean @Enable IES profile evaluation on translucent materials when using the Forward Shading mode.
---@field public bSupportRectLightOnTranslucent boolean @Enable rect light evaluation on translucent materials when using the Forward Shading mode.
---@field public bNvidiaAftermathEnabled boolean @Enables vendor specific GPU crash analysis tools.
---@field public bMultiView boolean @Enable single-pass stereoscopic rendering through view instancing or draw call instancing.
---@field public bMobilePostProcessing boolean @If true, mobile pipelines include a full post-processing pass with tonemapping. Disable this setting for a performance boost and to enable stereoscopic rendering optimizations. Changing this setting requires restarting the editor.
---@field public bMobileMultiView boolean @Enable single-pass stereoscopic rendering on mobile platforms.
---@field public bMobileUseHWsRGBEncoding boolean @If true then mobile single-pass (without post-processing) rendering will use HW accelerated sRGB encoding/decoding. Available only on Oculus for now.
---@field public bRoundRobinOcclusion boolean @Enable round-robin scheduling of occlusion queries for VR.
---@field public bMeshStreaming boolean @When enabled mesh LODs will stream in based on what is visible on screen.
---@field public bEnableHeterogeneousVolumes boolean @Enable rendering with the heterogeneous volumes subsystem.
---@field public bShouldHeterogeneousVolumesCastShadows boolean @Enable heterogeneous volumes to cast shadows onto the environment.
---@field public bCompositeHeterogeneousVolumesWithTranslucency boolean @Enable compositing with heterogeneous volumes when rendering translucency.
---@field public WireframeCullThreshold number @Screen radius at which wireframe objects are culled. Larger values can improve performance when viewing a scene in wireframe.
---@field public bSupportStationarySkylight boolean @"Stationary skylight requires permutations of the basepass shaders.  Disabling will reduce the number of shader permutations required per material. Changing this setting requires restarting the editor."
---@field public bSupportLowQualityLightmaps boolean @"Low quality lightmap requires permutations of the lightmap rendering shaders.  Disabling will reduce the number of shader permutations required per material. Note that the mobile renderer requires low quality lightmaps, so disabling this setting is not recommended for mobile titles using static lighting. Changing this setting requires restarting the editor."
---@field public bSupportPointLightWholeSceneShadows boolean @PointLight WholeSceneShadows requires many vertex and geometry shader permutations for cubemap rendering. Disabling will reduce the number of shader permutations required per material. Changing this setting requires restarting the editor."
---@field public bSupportTranslucentPerObjectShadow boolean @Enable translucent volumetric self-shadow, requires vertex and pixel shader permutations for all tranlucent materials even if not used by any light.
---@field public bSupportCloudShadowOnSingleLayerWater boolean @Enable cloud shadow on SingleLayerWater. This is evaluated per vertex to reduce GPU cost and requires extra samplers/textures to be bound to vertex shaders. This is not implemented on mobile as VolumetricClouds are not available on these platforms.
---@field public bEnableSubstrate boolean @Enable Substrate materials (Experimental).
---@field public SubstrateOpaqueMaterialRoughRefraction boolean @Enable Substrate opaque material rough refractions effect from top layers over layers below.
---@field public SubstrateDebugAdvancedVisualizationShaders boolean @Enable advanced Substrate material debug visualization shaders. Base pass shaders can output such advanced data.
---@field public bMaterialRoughDiffuse boolean @Enable Rough Diffuse Material. Please note that when Substrate is enabled, energy conservation is forced to ENABLED.
---@field public bMaterialEnergyConservation boolean @Enable Energy Conservation on Material. Please note that when Substrate is enabled, energy conservation is forced to ENABLED.
---@field public bOrderedIndependentTransparencyEnable boolean @Enable support for Order-Independent-Transparency on translucent surfaces, which remove most of the sorting artifact among translucent surfaces.
---@field public bUseHairStrandsAutoLODMode boolean @Enable hair strands Auto LOD mode by default. Otherwise use Manual LOD mode. Auto LOD mode adapts hair curves based on screen coverage. Manual LOD mode relies on LODs manually setup per groom asset. This global behavior can be overridden per groom asset
---@field public bSupportSkinCacheShaders boolean @Cannot be disabled while Ray Tracing is enabled as it is then required.
---@field public bSkipCompilingGPUSkinVF boolean @Cannot be enabled while the skin cache is turned off.
---@field public DefaultSkinCacheBehavior ESkinCacheDefaultBehavior @Default behavior if all skeletal meshes are included/excluded from the skin cache. If Support Ray Tracing is enabled on a mesh, the skin cache will be used for Ray Tracing updates on that mesh regardless of this setting.
---@field public SkinCacheSceneMemoryLimitInMB number @Maximum amount of memory (in MB) per world/scene allowed for the Compute Skin Cache to generate output vertex data and recompute tangents.
---@field public bMobileEnableStaticAndCSMShadowReceivers boolean @Allow primitives to receive both static and CSM shadows from a stationary light. Disabling will free a mobile texture sampler and reduce shader permutations. Changing this setting requires restarting the editor.
---@field public bMobileEnableMovableLightCSMShaderCulling boolean @Primitives lit by a movable directional light will render with the CSM shader only when determined to be within CSM range. Changing this setting requires restarting the editor.
---@field public MobileLocalLightSetting integer @Select which Local Light Setting to use for Mobile. Changing this setting requires restarting the editor.
---@field public bMobileForwardEnableClusteredReflections boolean @Whether to enable clustered reflections on mobile forward (including translucency in deferred). Always supported for opaque geometry on mobile deferred. Changing this setting requires restarting the editor.
---@field public bMobileEnableNoPrecomputedLightingCSMShader boolean @When Allow Static Lighting is enabled, shaders to support CSM without any precomputed lighting are not normally generated. This setting allows CSM for this case at the cost of extra shader permutations. Changing this setting requires restarting the editor.
---@field public bMobileAllowDistanceFieldShadows boolean @Generate shaders for static primitives render Lightmass-baked distance field shadow maps from stationary directional lights. Changing this setting requires restarting the editor.
---@field public bMobileAllowMovableDirectionalLights boolean @Generate shaders for primitives to receive movable directional lights. Changing this setting requires restarting the editor.
---@field public bMobileAllowMovableSpotlightShadows boolean @Generate shaders for primitives to receive shadow from movable spotlights. Changing this setting requires restarting the editor.
---@field public bSupport16BitBoneIndex boolean @If enabled, a new mesh imported will use 8 bit (if <=256 bones) or 16 bit (if > 256 bones) bone indices for rendering.
---@field public bGPUSkinLimit2BoneInfluences boolean @Whether to use 2 bone influences instead of the default of 4 for GPU skinning. This does not change skeletal mesh assets but reduces the number of instructions required by the GPU skin vertex shaders. Changing this setting requires restarting the editor.
---@field public bSupportDepthOnlyIndexBuffers boolean @Support depth-only index buffers, which provide a minor rendering speedup at the expense of using twice the index buffer memory.
---@field public bSupportReversedIndexBuffers boolean @Support reversed index buffers, which provide a minor rendering speedup at the expense of using twice the index buffer memory.
---@field public bMobileAmbientOcclusion boolean @Mobile Ambient Occlusion. Causion: An extra sampler will be occupied in mobile base pass pixel shader after enable the mobile ambient occlusion. Changing this setting requires restarting the editor.
---@field public bMobileDBuffer boolean @Whether to accumulate decal properties to a buffer before the base pass with mobile rendering. DBuffer enabled forces a full prepass. Changing this setting requires restarting the editor.
---@field public bUseUnlimitedBoneInfluences boolean @If enabled, a new mesh imported will use unlimited bone buffer instead of fixed MaxBoneInfluences for rendering.
---@field public bAlwaysUseDeformerForUnlimitedBoneInfluences boolean @Any mesh LODs using Unlimited Bone Influences will always be rendered with a Mesh Deformer. This reduces the number of shader permutations needed for skeletal mesh materials, saving memory at the cost of performance. Has no effect if either Unlimited Bone Influences or Deformer Graph is disabled.
---@field public UnlimitedBonInfluencesThreshold integer @When Unlimited Bone Influence is enabled, it still uses a fixed bone inflence buffer until the max bone influence of a mesh exceeds this value
---@field public DefaultBoneInfluenceLimit FPerPlatformInt @When BoneInfluenceLimit on a skeletal mesh LOD is set to 0, this setting is used instead. If this setting is 0, no limit will be applied here and the max bone influences will be determined by other project settings. Changing this setting requires restarting the editor.
---@field public MaxSkinBones FPerPlatformInt @Max number of bones that can be skinned on the GPU in a single draw call. The default value is set by the Compat.MAX_GPUSKIN_BONES consolevariable. Changing this setting requires restarting the editor.
---@field public MobilePlanarReflectionMode integer @The PlanarReflection will work differently on different mode on mobile platform, choose the proper mode as expect. Changing this setting requires restarting the editor.
---@field public bMobileSupportsGen4TAA boolean @Support desktop Gen4 TAA with mobile rendering. Changing this setting requires restarting the editor.
---@field public bStreamSkeletalMeshLODs FPerPlatformBool @Whether to stream skeletal mesh LODs by default.
---@field public bDiscardSkeletalMeshOptionalLODs FPerPlatformBool @Whether to discard skeletal mesh LODs below minimum LOD levels at cook time.
---@field public VisualizeCalibrationColorMaterialPath FSoftObjectPath @When the VisualizeCalibrationColor show flag is enabled, this path will be used as the post-process material to render. The post-process material's Blendable Location property must be set to "After Tonemapping" for proper calibration display.
---@field public VisualizeCalibrationCustomMaterialPath FSoftObjectPath @When the VisualizeCalibrationCustom show flag is enabled, this path will be used as the post-process material to render. The post-process material's Blendable Location property must be set to "After Tonemapping" for proper calibration display.
---@field public VisualizeCalibrationGrayscaleMaterialPath FSoftObjectPath @When the VisualizeCalibrationGrayscale show flag is enabled, this path will be used as the post-process material to render. The post-process material's Blendable Location property must be set to "After Tonemapping" for proper calibration display.
local URendererSettings = {}

