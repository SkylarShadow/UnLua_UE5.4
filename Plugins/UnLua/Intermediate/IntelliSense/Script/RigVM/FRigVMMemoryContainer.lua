---The FRigVMMemoryContainer provides a heterogeneous memory container to store arbitrary
---data. Each element stored can be referred to using a FRigVMRegister.
---Elements can be accessed by index (index of the register), FRigVMOperand or by name.
---Name access is optional and is specified upon construction of the container.
---The memory container provides a series of templated functions to add and get data.
---For example:
---            int32 Index = Container.Add<float>(4.f);
---     float& ValueRef = Container.GetRef<float>(Index);
---This can also be done with arrays:
---     TArray<float> MyArray = {3.f, 4.f, 5.f};
---            int32 Index = Container.AddFixedArray<float>(MyArray);
---     FRigVMFixedArray<float> ArrayView = Container.GetFixedArray<float>(Index);
---Registers can store dynamically resizable memory as well by reyling on indirection.
---Arrays with a single slice are going to be stored as a FRigVMByteArray, [unit8], so for example for a float array in C++ it would be (TArray<float> Param).
---Single values with multiple slices are also going to be stored as a FRigVMByteArray, [unit8], so for example for a float array in C++ it would be (float Param).
---Arrays with multiple slices are going to be stored as a FRigVMNestedByteArray, [[unit8]], so for example for a float array in C++ it would be (TArray<float> Param).
---@class FRigVMMemoryContainer
---@field public bUseNameMap boolean
---@field public MemoryType ERigVMMemoryType
---@field public Registers TArray<FRigVMRegister>
---@field public RegisterOffsets TArray<FRigVMRegisterOffset>
---@field public Data TArray<integer>
---@field public ScriptStructs TArray<UScriptStruct>
---@field public NameMap TMap<string, integer>
---@field public bEncounteredErrorDuringLoad boolean
local FRigVMMemoryContainer = {}
